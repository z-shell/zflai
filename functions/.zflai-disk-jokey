# Copyright (c) 2018 Sebastian Gniazdowski
#
# zflai_memory_keeper
#
# Receives log lines on stdin, stores them to internal memory buffer
#
# stdin  ---DATA-->  internal array of lines  ---DATA-->  log-file / database
#

emulate -LR zsh -o extendedglob -o typesetsilent -o warncreateglobal \
            -o rcquotes -o noshortloops -o noautopushd

# It's a background process, can afford logging
# to a file
function .zflai_run_log {
    local ts
    .zflai_format_ts ts
    [[ -z "$1" ]] && ts=""
    [[ "$*" = *${ts%%-*}* ]] && print -r -- "$*" >>! "$LOG_FILE" || print -r -- "$ts $*" >>! "$LOG_FILE"
    return 0
}

# No way around the 1 second waiting, e.g. SQLite
# can respond not enough fast for -t 0, but as it
# is done in background process, it's not a drama
#
# $1 - label for log message
# $2 - timeout value (>=0)
# $3 - where to store fetched text/array (default: REPLY/reply)
# $4 - preprocess the captured output, possible values are:
#      - get-tokens - get words delimeted by white space, put them into $3 array
#      - get-tokens-nl - as above, but return as \n-joined string (into $3)
#      - whitespace-collapse - returns text (not array) in which consecutive
#        white spaces are replaced by single space; replaces also tabs with space
#      - copy - no ingerention into the captured text
function .zflai_coproc_error_fetch {
    local __label="${1:-zflai}" __tout="${2:-1}" __var_name="$3" __preproc="${4:-copy}"
    local __iobuf __outbuf="" __retval=0 __tab=$'\t' __nl=$'\n' IFS=''
    local -a __arr
    repeat 3; do
        while read -r -t "$__tout" -p __iobuf; do
            if [[ $__iobuf = (Error*|ERROR*) ]]; then
                builtin print -r -- "$__label: $__iobuf" >>! "$LOG_FILE"
                __retval=1
            # E.g.: mysql: [Warning] â€¦
            elif [[ $__iobuf != mysql:\ \[*\]* ]]; then
                __outbuf+="$__iobuf$__nl"
            fi
        done
        __tout=0
    done

    if (( !retval )); then
        [[ -z "$__var_name" ]] && { __var_name="REPLY"; [[ "$__preproc" = "get-tokens" ]] && __var_name="reply"; }

        case "$__preproc" in
            get-tokens)
                __outbuf="${__outbuf//($__tab|$__nl)/ }"
                __arr=( "${(s: :)__outbuf}" )
                ;;

            get-tokens-nl)
                __outbuf="${__outbuf//($__tab|$__nl)/ }"
                __arr=( "${(s: :)__outbuf}" )
                __outbuf="${(F)__arr}"
                ;;

            whitespace-collapse)
                __outbuf="${__outbuf//$__tab/ }"
                __outbuf="${__outbuf//[ ]##/ }"
                ;;

            *) # copy
                ;;
        esac

        if [[ "$__preproc" = "get-tokens" ]]; then
            : "${(PA)__var_name::=${__arr[@]}}"
        else
            : "${(P)__var_name::=$__outbuf}"
        fi
    fi

    return "$__retval"
}

trap ".zflai_store 'INT signal received'; return 1;" INT
trap ".zflai_store 'HUP signal received'; return 1;" HUP
trap ".zflai_store 'TERM signal received'; return 1;" TERM
trap ".zflai_store 'QUIT signal received'; return 1;" QUIT
trap ".zflai_store 'ABRT signal received'; return 1;" ABRT
trap ".zflai_store 'PIPE signal received'; return 1;" PIPE

local REPLY MATCH
integer MBEGIN MEND
local -a match mbegin mend
local ZUID_ID="$1" ZUID_CODENAME="$2"
local CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/zi/zflai"
local CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/zi/zflai"
local LOG_FILE="$CACHE_DIR/zflai.log"
[[ ! -d "$CONFIG_DIR" ]] && command mkdir -p "$CONFIG_DIR"
[[ ! -d "$CACHE_DIR" ]] && command mkdir -p "$CACHE_DIR"
[[ ! -d "$CACHE_DIR"/tables ]] && command mkdir -p "$CACHE_DIR"/tables
builtin cd -q "$CACHE_DIR"

[[ "$ZFLAI_LIBS_SOURCED" != "1" ]] && source "${ZFLAI_SRC_DIR}/zflai_lib.zsh"

.zflai_run_log ""
.zflai_run_log "== ZFLAI Background Process Starting, PID=${sysparams[pid]}, ID=$ZUID_ID/$ZUID_CODENAME =="
.zflai_read_db_defs
.zflai_learn_table "default-%ID-%CN :: timestamp:integer / message:varchar(288)"
.zflai_read_table_defs

local keep_alive_time store_interval
builtin zstyle -s ":plugin:zflai:dj" keep_alive_time keep_alive_time || keep_alive_time=45
builtin zstyle -s ":plugin:zflai:dj" store_interval store_interval || store_interval=30

local -a DATA

typeset -F SECONDS=0
integer action_time="$SECONDS" store_time="$SECONDS"

local line cause="exit/${keep_alive_time}s-idle"
local current_log_db="default" current_log_table="default-%ID-%CN"
local current_db="perf-record" current_table="performance-%ID-%CN"
local tpe sel_db sel_table

while (( 1 )); do
    IFS='' read -r -t 2 line && {
        [[ "$line" = ($'\r'|$'\n'|$'\r\n'|"") ]] && continue

        # Special command?
        if [[ "$line" = "!ZFLAI-SPECIAL-CMD: "* ]]; then
            line="${line#\!ZFLAI-SPECIAL-CMD: }"
            case "$line" in
                exit)
                    action_time="-$keep_alive_time"
                    cause="exit/forbid-race-condition"
                    ;;
            esac
        # Table definition?
        elif [[ "${line[1]}" = "T" ]]; then
            .zflai_learn_table "${line##T[[:blank:]]#}"
            continue
        else
            # Log?
            if [[ "${line[1]}" = "L" ]]; then
                tpe="log"
                line="${line##L[[:blank:]]#}"
                sel_db="$current_log_db"
                sel_table="$current_log_table"
            # Record?
            elif [[ "${line[1]}" = "R" ]]; then
                tpe="record"
                line="${line##R[[:blank:]]#}"
                sel_db="$current_db"
                sel_table="$current_table"
            else
                .zflai_run_log "DJ: Unknown request received: \`$line'"
                continue
            fi

            # This handles database spec, with optional table spec, with optional meta-data vs. data separator (i.e. "::")
            # Examples:
            #   @db1 / zplugin-su-%ID :: Hello World
            #   @db1 / zplugin-su-%ID Hello World
            #   @db1 :: Hello World
            #   @db1 Hello World
            if [[ "$line" = (#b)[[:blank:]]#"@"([^[:blank:]]##)[[:blank:]](#c0,1)([[:blank:]]#/[[:blank:]]#([^[:blank:]]##)[[:blank:]](#c0,1)|)([[:blank:]]#::[[:blank:]](#c0,1)|)(*) ]]; then
                sel_db="${match[1]}"
                sel_table="${match[3]:-$sel_table}"
                line="${match[5]}"
            # No database spec, just table spec
            # Examples:
            # zplugin-su-%ID :: Hello World
            elif [[ "$line" = (#b)[[:blank:]]#([^[:blank:]]##)[[:blank:]]#::[[:blank:]](#c0,1)(*) ]]; then
                sel_table="${match[1]}"
                line="${match[2]}"
            fi

            DATA+=( "$tpe::$sel_db::$sel_table::${EPOCHSECONDS:-0} | $line" )
            action_time="$SECONDS"
        fi
    }

    # Being idle too long - exit, quickly close stdin
    # so that it is clear we're not reading more data
    (( ( SECONDS - action_time ) >= keep_alive_time )) && { builtin exec 0>&-; break; }

    (( ( SECONDS - store_time ) >= store_interval )) && { store_time="$SECONDS"; .zflai_store "${store_interval}s-interval"; }
done

.zflai_store "$cause"
